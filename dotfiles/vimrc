" My .vimrc file
"
" Author: Konstantin Bukley <madundead@gmail.com>
" Raw version: http://raw.github.com/madundead/stuff/master/vim/vimrc
"
" Inspired by:
" Vincent Driessen <vincent@datafox.nl>
" https://raw.github.com/nvie/vimrc/master/vimrc
"
" amix the lucky stiff
" http://amix.dk/vim/vimrc.html
"
" Yan Pritzker
" https://github.com/skwp/dotfiles
"
" Colorscheme:
" Ethan Schoonover
" https://github.com/altercation/solarized
"
" Feel free to use, modify or share this file


" ========================================================
" -> General
" ========================================================

" turn off vi-compatible mode
set nocompatible

source ~/.vimrc.plugins

" encoding
set encoding=utf-8
set fileencoding=utf-8

" quantity of lines vim have to remember
set history=500

" setting up <leader>
let mapleader=","
let g:mapleader=","

" includes ftplugin.vim which is responsible for filetype detection
filetype plugin indent on

" default indentation rules
autocmd BufEnter *.c,*.cpp,*.java,*.php,*.html,*.erb,*.css,*.scss,*.sass,*.js,*.coffee,*.yml,*.sh,*.rake,*.feature,*.json,*.md,*.mdown,*.ru,*.sql,*.txt,*.xml set expandtab noeol tabstop=2 shiftwidth=2 softtabstop=2

" set syntax highlighting
syntax on


" ========================================================
" -> Plugin settings
" ========================================================

let NERDTreeWinPos = "right"   " put NERDTree on the right. just because I can
let NERDTreeMinimalUI = 1      " remove 'press ? for help' and .. (up on one dir)
let NERDTreeDirArrows = 1      " replace ugly + with fancy arrows

let g:html_indent_inctags = "html,body,head,tbody"
let g:html_indent_script1 = "inc"
let g:html_indent_style1  = "inc"

let g:gist_clip_command    = 'xclip -selection clipboard'
let g:gist_detect_filetype = 1
let g:gist_post_private    = 1
let g:gist_show_privates   = 1

let g:ackprg = "ack-grep -H --nocolor --nogroup --column"

" fix for Ack.vim bleeding its output into host terminal
let &shellpipe="&>"

let g:vroom_use_vimux = 1

let g:notes_directory = '~/Dropbox/Notes'


" ========================================================
" -> Colors & Fonts
" ========================================================

colorscheme solarized                       " awesome colorscheme
set background=dark                         " realy nice :3

if has('gui_running')
  set guioptions-=T                         " remove toolbar
  set guioptions-=m                         " remove menubar
  set guioptions+=LlRrb                     " remove
  set guioptions-=LlRrb                     " scrollbars
  set guifont=Monaco\ for\ Powerline\ 20    " patched monaco font
  set t_Co=256
  let g:solarized_termcolors=256
  let g:Powerline_theme='solarized256'
  let g:Powerline_colorscheme='solarized256'
else
  set t_Co=16
  let g:solarized_termcolors=16
  let g:solarized_visibility="high"
  let g:solarized_contrast="high"
  let g:Powerline_theme='solarized16'
  let g:Powerline_colorscheme='solarized16'
endif

let g:Powerline_symbols='fancy'


" ========================================================
" -> User Interface
" ========================================================

" enables menu at the bottom
set wildmenu
" highlight search
set hlsearch
" do not redraw while running macros
set lazyredraw
" tab label - #{number} [{filename}] {modified}
set guitablabel=#%N\ [%t]\ %M
" show status even for single buffer displayed
set laststatus=2
" highlight current line
set cursorline
" number rows
set number
" disable welcome message
set shortmess+=I
" show matching braces
set showmatch
" shows when you are in insert mode
set showmode
" shows commands in right bottom corner
set showcmd
" show cursor position all the tiem
set ruler
" show title in console status bar
set title
" dont wrap lines
set nowrap
" when I scroll up or down, there are 2 lines between the line I'm on and the bottom or top of the screen.
set scrolloff=5
" how many tenths of a second to blink on matching brackets
set mat=2
" disable cursor blink
set gcr=a:blinkon0
" hide the mouse pointer while typing
set mousehide


" ========================================================
" -> Behavior & Different Tricks
" ========================================================

" shamelessly taken from YADR dotfile repo https://github.com/skwp/dotfiles
" stuff to ignore whent tab completing
set wildignore=*.o,*.obj,*~
set wildignore+=*vim/backups*
set wildignore+=*sass-cache*
set wildignore+=*DS_Store*
set wildignore+=vendor/rails/**
set wildignore+=vendor/cache/**
set wildignore+=*.gem
set wildignore+=log/**
set wildignore+=tmp/**
set wildignore+=*.png,*.jpg,*.gif
" W invokes sudo
command W w !sudo tee % > /dev/null
" copying to clipboard
set clipboard=unnamed
" dunno
set matchtime=2
" force backspace to behave like in any other editor
set backspace=2
" editor will start searching when you type the first character of the search string
set incsearch
" turn off visualbell
set novisualbell
" no ~ backup files
set nobackup
set nowb
set noswapfile
" doesn't select lines number in vim
set mouse=a
" show whitespace characters
set list listchars=tab:→\ ,trail:·


" ========================================================
" -> Indentations
" ========================================================

" automatically inserts one extra level of indentation in some cases
set smartindent
" affects how <TAB> key presses are interpreted depending on where the cursor is
set smarttab
" tab counts as 4 columns
set tabstop=4
" numbers of spaces to (auto)indent
set shiftwidth=4


" ========================================================
" -> Filetype Dependent Settings
" ========================================================

if has("autocmd")
  " YAML
  autocmd FileType yaml setlocal tabstop=2 shiftwidth=2 softtabstop=2

  " Treat JSON files like JavaScript
  au BufNewFile,BufRead *.json set ft=javascript

  " Treat LESS files like CSS
  au BufNewFile,BufRead *.less set filetype=css

  " Treat SASS files like CSS
  au BufNewFile,BufRead *.scss set filetype=css

  " Treat HBS files like HTML
  au BufNewFile,BufRead *.hbs set filetype=html

  " CSS
  autocmd FileType css setlocal autoindent expandtab shiftwidth=4 softtabstop=4

  au BufNewFile,BufReadPost *.coffee setl filetype=coffee
  au BufWritePost *.coffee silent CoffeeMake! -b | cwindow | redraw!

  " Rabl
  au BufNewFile,BufReadPost *.rabl setl filetype=ruby

  au BufNewFile,BufReadPost .vimrc setl shiftwidth=2 expandtab

  augroup markdown " {{{
    au!
    au BufNewFile,BufRead *.md,*.markdown setlocal filetype=ghmarkdown
  augroup end " }}}

  augroup html_files "{{{
    au!
    au BufNewFile,BufRead *.phtml set filetype=html
    au BufNewFile,BufRead *.erb set filetype=eruby
    au FileType haml setlocal autoindent expandtab shiftwidth=4 softtabstop=4
    au FileType html setlocal autoindent expandtab shiftwidth=4 softtabstop=4
    au FileType eruby setlocal autoindent expandtab shiftwidth=4 softtabstop=4
  augroup end " }}}

  augroup ruby_files "{{{
    au!
    au BufNewFile,BufRead Capfile,Gemfile,Vagrantfile setlocal filetype=ruby
    au filetype ruby setlocal autoindent expandtab shiftwidth=2 tabstop=2 softtabstop=2
    au FileType ruby,eruby set omnifunc=rubycomplete#Complete
    au FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
    au FileType ruby,eruby let g:rubycomplete_rails = 1
    au FileType ruby,eruby let g:rubycomplete_classes_in_global = 1
    au FileType ruby,eruby inoremap <c-space> <c-x><c-o>
    au FileType ruby,eruby inoremap <Nul> <c-x><c-o>
  augroup end " }}}

  augroup javascript_files "{{{
    au!
    au BufNewFile,BufReadPost *.js setl shiftwidth=4 expandtab
  augroup end "}}}

  au FileType python setlocal autoindent expandtab shiftwidth=2 tabstop=2 softtabstop=2
endif


" ========================================================
" -> Hotkeys & Bindings
" ========================================================

" make p in visual mode replace the selected text with the yank register
xnoremap p <Esc>:let current_reg = @"<CR>gvdi<C-R>=current_reg<CR><Esc>


" C-Space for autocomplete
if has("gui")
    " C-Space seems to work under gVim on both Linux and win32
    inoremap <C-Space> <C-n>
else " no gui
  if has("unix")
    inoremap <Nul> <C-n>
  else
  " I have no idea of the name of Ctrl-Space elsewhere
  endif
endif

" swtich between buffers by arrows (that's not nice at all)
nmap <silent> <Up> :wincmd k<CR>
nmap <silent> <Down> :wincmd j<CR>
nmap <silent> <Left> :wincmd h<CR>
nmap <silent> <Right> :wincmd l<CR>

" Move between splits
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" change size of vsplited buffers by <Alt> + arrows
map <A-Left> <C-W><
map <A-Right> <C-W>>

" bash like keys for the command line
cnoremap <C-A> <Home>
cnoremap <C-E> <End>

" ; = :
nnoremap ; :

" close buffer by Q
nmap Q :q!<CR>

" new tab by F1
nmap <F1> :tabnew<CR>
imap <F1> <ESC> :tabnew<CR>
vmap <F1> :tabnew<CR>

" vertical split by F2
" nmap <silent> <F2> :vsplit<CR>
" imap <F2> <ESC> :vsplit<CR>
" vmap <F2> :vsplit<CR>

" Ack search by F3
nmap <F3> :Ack 
imap <F3> <Esc>:Ack 
vmap <F3> <Esc>:Ack 

" folding by F4
nnoremap <Space> za

" lets try to use dropbox file as notepad
nmap <F5> :sp note:Main<CR>

" leader + a to copy all text from current buffer
nmap <leader>a :%y+ <CR>

" leader + n to launch NERDTree
map <leader>n :NERDTreeToggle<CR>

" hide matches on <leader>space
nnoremap <leader><space> :nohlsearch<cr>


nmap <leader>g :Gitv <CR>

" Paste from clipboard
map <leader>p "+p
map <leader>y "+y

map <leader>s csw

map <leader>b :Gblame<CR>

map <leader>cc :CoffeeCompile<CR>
map <leader>cv :CoffeeCompile watch<CR>

" leader + z to zencode
nmap <leader>z <C-y>, <CR>

" CtrlP for insert mode
imap <C-P> <ESC> :CtrlP<CR>

" when pressing <leader>cd switch to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>

" switching between tabs
nmap <silent> <Tab> :tabnext<CR>
nmap <silent> <S-Tab> :tabprevious<CR>

" remove search highlight
nmap <silent> <C-N> :silent noh<CR>

" Search mappings: These will make it so that going to the next one in a
" search will center on the line it's found in.
map N Nzz
map n nzz

nnoremap j gj
nnoremap k gk

vnoremap < <gv
vnoremap > >gv

" yy to yank whole line
nnoremap yy Y
" Y to yank til the end of line
nnoremap Y y$

" jj => ESC
imap jj <ESC>

" vv => vsplit
nnoremap <silent> vv <C-w>v

" toggle between last open buffers
nnoremap <leader><leader> <c-^>

" window title is always 'vim'
auto BufEnter * let &titlestring = "vim"

" Strip trailing whitespace
function! <SID>StripTrailingWhitespaces()
    " Preparation : save last search, and cursor position
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    silent! call cursor(l, c)
endfunction

nnoremap <silent> <Leader>w :call <SID>StripTrailingWhitespaces()<CR>

" Edit/Reload Vimrc
map <silent> <leader>ev :edit ~/.vimrc<CR>
map <silent> <leader>sv :source ~/.vimrc<CR>:filetype detect<CR>:exe ":echo 'vimrc reloaded'"<CR>

" Find conflict markers
nmap <silent> <leader>c <ESC>/\v^[<=>]{7}( .*\|$)<CR>

"syntastic
let g:syntastic_check_on_open=1
let g:syntastic_echo_current_error=1
let g:syntastic_enable_signs=1
let g:syntastic_enable_balloons = 1
let g:syntastic_loc_list_height=5
let g:syntastic_javascript_checkers = ['eslint']
